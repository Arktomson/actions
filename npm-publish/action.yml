name: 'NPM Publisher'
description: '发布 NPM 包到注册表'

branding:
  icon: 'package'
  color: 'blue'

inputs:
  version:
    description: '版本更新类型 (patch, minor, major) 或具体版本号'
    required: false
    default: 'patch'
  registry:
    description: 'NPM 注册表 URL'
    required: false
    default: 'https://registry.npmjs.org/'
  token:
    description: 'NPM 访问令牌'
    required: true
  package_path:
    description: 'package.json 文件路径'
    required: false
    default: './package.json'
  dist_tag:
    description: '发布标签 (latest, beta, alpha, etc.)'
    required: false
    default: 'latest'
  access:
    description: '包访问级别 (public, restricted)'
    required: false
    default: 'public'
  skip_build:
    description: '是否跳过构建步骤'
    required: false
    default: 'false'
  build_script:
    description: '构建脚本命令'
    required: false
    default: 'npm run build'

outputs:
  published_version:
    description: '已发布的版本号'
  package_name:
    description: '包名称'
  registry_url:
    description: '注册表 URL'

runs:
  using: 'composite'
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: ${{ inputs.registry }}
        
    - name: Get package info
      id: package
      shell: bash
      run: |
        PACKAGE_NAME=$(node -p "require('${{ inputs.package_path }}').name")
        CURRENT_VERSION=$(node -p "require('${{ inputs.package_path }}').version")
        
        echo "name=${PACKAGE_NAME}" >> $GITHUB_OUTPUT
        echo "current_version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
        
    - name: Install dependencies
      shell: bash
      run: npm ci
      
    - name: Run build
      if: inputs.skip_build == 'false'
      shell: bash
      run: ${{ inputs.build_script }}
      
    - name: Update version
      id: version
      shell: bash
      run: |
        if [[ "${{ inputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
          # 具体版本号
          npm version ${{ inputs.version }} --no-git-tag-version
          NEW_VERSION="${{ inputs.version }}"
        else
          # 版本类型 (patch, minor, major)
          NEW_VERSION=$(npm version ${{ inputs.version }} --no-git-tag-version)
          NEW_VERSION=${NEW_VERSION#v}  # 移除 v 前缀
        fi
        
        echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
        
    - name: Run tests
      shell: bash
      run: |
        if npm run test --if-present; then
          echo "✅ 测试通过"
        else
          echo "⚠️ 没有找到测试脚本或测试失败"
        fi
        
    - name: Publish to NPM
      shell: bash
      env:
        NODE_AUTH_TOKEN: ${{ inputs.token }}
      run: |
        if [[ "${{ inputs.access }}" == "public" ]]; then
          npm publish --access public --tag ${{ inputs.dist_tag }}
        else
          npm publish --tag ${{ inputs.dist_tag }}
        fi
        
        echo "published_version=${{ steps.version.outputs.new_version }}" >> $GITHUB_OUTPUT
        echo "package_name=${{ steps.package.outputs.name }}" >> $GITHUB_OUTPUT
        echo "registry_url=${{ inputs.registry }}" >> $GITHUB_OUTPUT
        
    - name: Create summary
      shell: bash
      run: |
        echo "## 📦 NPM 发布成功" >> $GITHUB_STEP_SUMMARY
        echo "- **包名称**: ${{ steps.package.outputs.name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **版本**: ${{ steps.version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **标签**: ${{ inputs.dist_tag }}" >> $GITHUB_STEP_SUMMARY
        echo "- **注册表**: ${{ inputs.registry }}" >> $GITHUB_STEP_SUMMARY
        echo "- **NPM 链接**: https://www.npmjs.com/package/${{ steps.package.outputs.name }}" >> $GITHUB_STEP_SUMMARY