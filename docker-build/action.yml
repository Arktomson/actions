name: 'Docker Builder'
description: '构建和推送 Docker 镜像'

branding:
  icon: 'layers'
  color: 'blue'

inputs:
  image_name:
    description: '镜像名称'
    required: true
  tag:
    description: '镜像标签'
    required: false
    default: 'latest'
  registry:
    description: 'Docker 注册表 (docker.io, ghcr.io, etc.)'
    required: false
    default: 'docker.io'
  username:
    description: '注册表用户名'
    required: false
  password:
    description: '注册表密码或访问令牌'
    required: false
  dockerfile:
    description: 'Dockerfile 路径'
    required: false
    default: './Dockerfile'
  context:
    description: '构建上下文路径'
    required: false
    default: '.'
  build_args:
    description: '构建参数 (每行一个，格式: KEY=VALUE)'
    required: false
  platforms:
    description: '目标平台 (linux/amd64,linux/arm64)'
    required: false
    default: 'linux/amd64'
  push:
    description: '是否推送镜像'
    required: false
    default: 'true'
  cache_from:
    description: '缓存来源镜像'
    required: false
  cache_to:
    description: '缓存目标'
    required: false
  labels:
    description: '镜像标签 (每行一个，格式: KEY=VALUE)'
    required: false

outputs:
  image_digest:
    description: '镜像摘要'
  image_url:
    description: '镜像 URL'
  image_size:
    description: '镜像大小'

runs:
  using: 'composite'
  steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Registry
      if: inputs.username != '' && inputs.password != ''
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.username }}
        password: ${{ inputs.password }}
        
    - name: Prepare build args
      id: build_args
      shell: bash
      run: |
        BUILD_ARGS=""
        if [[ -n "${{ inputs.build_args }}" ]]; then
          while IFS= read -r line; do
            if [[ -n "$line" ]]; then
              BUILD_ARGS="$BUILD_ARGS --build-arg $line"
            fi
          done <<< "${{ inputs.build_args }}"
        fi
        echo "args=$BUILD_ARGS" >> $GITHUB_OUTPUT
        
    - name: Prepare labels
      id: labels
      shell: bash
      run: |
        LABELS=""
        # 默认标签
        LABELS="$LABELS --label org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
        LABELS="$LABELS --label org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}"
        LABELS="$LABELS --label org.opencontainers.image.revision=${{ github.sha }}"
        
        # 自定义标签
        if [[ -n "${{ inputs.labels }}" ]]; then
          while IFS= read -r line; do
            if [[ -n "$line" ]]; then
              LABELS="$LABELS --label $line"
            fi
          done <<< "${{ inputs.labels }}"
        fi
        echo "labels=$LABELS" >> $GITHUB_OUTPUT
        
    - name: Generate image tags
      id: tags
      shell: bash
      run: |
        FULL_IMAGE_NAME="${{ inputs.registry }}/${{ inputs.image_name }}"
        if [[ "${{ inputs.registry }}" == "docker.io" ]]; then
          FULL_IMAGE_NAME="${{ inputs.image_name }}"
        fi
        
        TAGS="$FULL_IMAGE_NAME:${{ inputs.tag }}"
        
        # 如果标签是 latest，同时添加 Git SHA 标签
        if [[ "${{ inputs.tag }}" == "latest" ]]; then
          TAGS="$TAGS,$FULL_IMAGE_NAME:${{ github.sha }}"
        fi
        
        echo "tags=$TAGS" >> $GITHUB_OUTPUT
        echo "full_name=$FULL_IMAGE_NAME" >> $GITHUB_OUTPUT
        
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.context }}
        file: ${{ inputs.dockerfile }}
        platforms: ${{ inputs.platforms }}
        push: ${{ inputs.push }}
        tags: ${{ steps.tags.outputs.tags }}
        cache-from: ${{ inputs.cache_from }}
        cache-to: ${{ inputs.cache_to }}
        build-args: |
          ${{ inputs.build_args }}
        labels: |
          org.opencontainers.image.created={{date 'YYYY-MM-DDTHH:mm:ssZ'}}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
          ${{ inputs.labels }}
          
    - name: Get image info
      if: inputs.push == 'true'
      shell: bash
      run: |
        IMAGE_DIGEST="${{ steps.build.outputs.digest }}"
        IMAGE_URL="${{ steps.tags.outputs.full_name }}:${{ inputs.tag }}"
        
        # 尝试获取镜像大小
        if command -v docker &> /dev/null; then
          IMAGE_SIZE=$(docker images --format "{{.Size}}" "$IMAGE_URL" 2>/dev/null | head -1 || echo "Unknown")
        else
          IMAGE_SIZE="Unknown"
        fi
        
        echo "image_digest=$IMAGE_DIGEST" >> $GITHUB_OUTPUT
        echo "image_url=$IMAGE_URL" >> $GITHUB_OUTPUT
        echo "image_size=$IMAGE_SIZE" >> $GITHUB_OUTPUT
        
    - name: Create summary
      shell: bash
      run: |
        echo "## 🐳 Docker 镜像构建完成" >> $GITHUB_STEP_SUMMARY
        echo "- **镜像名称**: ${{ steps.tags.outputs.full_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **标签**: ${{ inputs.tag }}" >> $GITHUB_STEP_SUMMARY
        echo "- **平台**: ${{ inputs.platforms }}" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ inputs.push }}" == "true" ]]; then
          echo "- **推送状态**: ✅ 已推送" >> $GITHUB_STEP_SUMMARY
          echo "- **镜像摘要**: \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **拉取命令**: \`docker pull ${{ steps.tags.outputs.full_name }}:${{ inputs.tag }}\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **推送状态**: ⏭️ 仅构建" >> $GITHUB_STEP_SUMMARY
        fi