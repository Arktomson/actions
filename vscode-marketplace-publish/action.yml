name: 'VS Code Marketplace Publisher'
description: '发布 VS Code 扩展到官方市场'
author: 'Arktomson'

branding:
  icon: 'package'
  color: 'blue'

inputs:
  version:
    description: '发布版本号 (可选，默认使用 package.json 中的版本)'
    required: false
  pre_release:
    description: '是否为预发布版本'
    required: false
    default: 'false'
  pat:
    description: 'VS Code Marketplace Personal Access Token'
    required: true
  package_path:
    description: 'package.json 文件路径'
    required: false
    default: './package.json'
  skip_duplicate:
    description: '是否跳过重复版本'
    required: false
    default: 'true'

outputs:
  published_version:
    description: '已发布的版本号'
  extension_id:
    description: '扩展 ID'

runs:
  using: 'composite'
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install vsce
      shell: bash
      run: |
        npm install -g @vscode/vsce
        
    - name: Get package info
      id: package
      shell: bash
      run: |
        PACKAGE_VERSION=$(node -p "require('${{ inputs.package_path }}').version")
        PACKAGE_NAME=$(node -p "require('${{ inputs.package_path }}').name")
        PUBLISHER=$(node -p "require('${{ inputs.package_path }}').publisher")
        
        echo "version=${PACKAGE_VERSION}" >> $GITHUB_OUTPUT
        echo "name=${PACKAGE_NAME}" >> $GITHUB_OUTPUT
        echo "publisher=${PUBLISHER}" >> $GITHUB_OUTPUT
        echo "extension_id=${PUBLISHER}.${PACKAGE_NAME}" >> $GITHUB_OUTPUT
        
    - name: Update version if specified
      if: inputs.version != ''
      shell: bash
      run: |
        npm version ${{ inputs.version }} --no-git-tag-version
        
    - name: Check if version exists
      if: inputs.skip_duplicate == 'true'
      shell: bash
      run: |
        VERSION_TO_CHECK=${{ inputs.version || steps.package.outputs.version }}
        EXTENSION_ID="${{ steps.package.outputs.extension_id }}"
        
        if vsce show "${EXTENSION_ID}" --json | jq -e ".versions[] | select(.version == \"${VERSION_TO_CHECK}\")"; then
          echo "Version ${VERSION_TO_CHECK} already exists, skipping publish"
          echo "skip_publish=true" >> $GITHUB_ENV
        else
          echo "Version ${VERSION_TO_CHECK} does not exist, proceeding with publish"
          echo "skip_publish=false" >> $GITHUB_ENV
        fi
        
    - name: Package extension
      if: env.skip_publish == 'false'
      shell: bash
      run: |
        if [[ "${{ inputs.pre_release }}" == "true" ]]; then
          vsce package --pre-release
        else
          vsce package
        fi
        
    - name: Publish to VS Code Marketplace
      if: env.skip_publish == 'false'
      shell: bash
      env:
        VSCE_PAT: ${{ inputs.pat }}
      run: |
        FINAL_VERSION=${{ inputs.version || steps.package.outputs.version }}
        
        if [[ "${{ inputs.pre_release }}" == "true" ]]; then
          vsce publish --pre-release
        else
          vsce publish
        fi
        
        echo "published_version=${FINAL_VERSION}" >> $GITHUB_OUTPUT
        echo "extension_id=${{ steps.package.outputs.extension_id }}" >> $GITHUB_OUTPUT
        
    - name: Create summary
      shell: bash
      run: |
        if [[ "${{ env.skip_publish }}" == "true" ]]; then
          echo "## ⏭️ 发布跳过" >> $GITHUB_STEP_SUMMARY
          echo "版本 ${{ inputs.version || steps.package.outputs.version }} 已存在，跳过发布" >> $GITHUB_STEP_SUMMARY
        else
          echo "## 🚀 发布成功" >> $GITHUB_STEP_SUMMARY
          echo "- **扩展 ID**: ${{ steps.package.outputs.extension_id }}" >> $GITHUB_STEP_SUMMARY
          echo "- **版本**: ${{ inputs.version || steps.package.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **预发布**: ${{ inputs.pre_release }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Marketplace 链接**: https://marketplace.visualstudio.com/items?itemName=${{ steps.package.outputs.extension_id }}" >> $GITHUB_STEP_SUMMARY
        fi