name: 'Release Manager'
description: '自动化版本发布管理'
author: 'Arktomson'

branding:
  icon: 'tag'
  color: 'green'

inputs:
  tag_name:
    description: '发布标签名称 (例如: v1.0.0)'
    required: true
  release_name:
    description: '发布名称 (可选，默认使用标签名称)'
    required: false
  body:
    description: '发布说明 (支持 Markdown)'
    required: false
  draft:
    description: '是否创建草稿发布'
    required: false
    default: 'false'
  prerelease:
    description: '是否为预发布版本'
    required: false
    default: 'false'
  generate_notes:
    description: '是否自动生成发布说明'
    required: false
    default: 'true'
  target_commitish:
    description: '目标分支或提交 (默认为默认分支)'
    required: false
  files:
    description: '要上传的文件列表 (每行一个文件路径)'
    required: false
  token:
    description: 'GitHub Token (默认使用 GITHUB_TOKEN)'
    required: false
    default: ${{ github.token }}

outputs:
  release_id:
    description: '创建的发布 ID'
  release_url:
    description: '发布页面 URL'
  upload_url:
    description: '文件上传 URL'

runs:
  using: 'composite'
  steps:
    - name: Validate inputs
      shell: bash
      run: |
        if [[ ! "${{ inputs.tag_name }}" =~ ^v?[0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
          echo "⚠️ 标签名称格式建议: v1.0.0"
        fi
        
    - name: Check if tag exists
      shell: bash
      run: |
        if git rev-parse "${{ inputs.tag_name }}" >/dev/null 2>&1; then
          echo "tag_exists=true" >> $GITHUB_ENV
        else
          echo "tag_exists=false" >> $GITHUB_ENV
        fi
        
    - name: Create tag if not exists
      if: env.tag_exists == 'false'
      shell: bash
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        if [[ -n "${{ inputs.target_commitish }}" ]]; then
          git tag -a "${{ inputs.tag_name }}" "${{ inputs.target_commitish }}" -m "Release ${{ inputs.tag_name }}"
        else
          git tag -a "${{ inputs.tag_name }}" -m "Release ${{ inputs.tag_name }}"
        fi
        
        git push origin "${{ inputs.tag_name }}"
        
    - name: Generate release notes
      if: inputs.generate_notes == 'true' && inputs.body == ''
      id: generate_notes
      shell: bash
      run: |
        # 获取上一个标签
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [[ -n "$PREVIOUS_TAG" ]]; then
          echo "## 🚀 更新内容" > release_notes.md
          echo "" >> release_notes.md
          
          # 生成提交日志
          git log --pretty=format:"- %s (%an)" ${PREVIOUS_TAG}..${{ inputs.tag_name }} >> release_notes.md
          
          echo "" >> release_notes.md
          echo "## 📈 统计信息" >> release_notes.md
          echo "- **提交数量**: $(git rev-list --count ${PREVIOUS_TAG}..${{ inputs.tag_name }})" >> release_notes.md
          echo "- **文件变更**: $(git diff --name-only ${PREVIOUS_TAG}..${{ inputs.tag_name }} | wc -l)" >> release_notes.md
        else
          echo "## 🎉 首次发布" > release_notes.md
          echo "" >> release_notes.md
          echo "这是项目的首次发布版本。" >> release_notes.md
        fi
        
        # 读取生成的说明
        RELEASE_BODY=$(cat release_notes.md)
        echo "generated_body<<EOF" >> $GITHUB_OUTPUT
        echo "$RELEASE_BODY" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
      with:
        tag_name: ${{ inputs.tag_name }}
        release_name: ${{ inputs.release_name || inputs.tag_name }}
        body: ${{ inputs.body || steps.generate_notes.outputs.generated_body }}
        draft: ${{ inputs.draft }}
        prerelease: ${{ inputs.prerelease }}
        commitish: ${{ inputs.target_commitish }}
        
    - name: Upload Release Assets
      if: inputs.files != ''
      shell: bash
      run: |
        while IFS= read -r file; do
          if [[ -f "$file" ]]; then
            echo "上传文件: $file"
            filename=$(basename "$file")
            curl -X POST \
              -H "Authorization: token ${{ inputs.token }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$file" \
              "${{ steps.create_release.outputs.upload_url }}?name=$filename"
          else
            echo "⚠️ 文件不存在: $file"
          fi
        done <<< "${{ inputs.files }}"
        
    - name: Output results
      shell: bash
      run: |
        echo "release_id=${{ steps.create_release.outputs.id }}" >> $GITHUB_OUTPUT
        echo "release_url=${{ steps.create_release.outputs.html_url }}" >> $GITHUB_OUTPUT
        echo "upload_url=${{ steps.create_release.outputs.upload_url }}" >> $GITHUB_OUTPUT
        
    - name: Create summary
      shell: bash
      run: |
        echo "## 🎉 发布创建成功" >> $GITHUB_STEP_SUMMARY
        echo "- **标签**: ${{ inputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **名称**: ${{ inputs.release_name || inputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **类型**: ${{ inputs.prerelease == 'true' && '预发布' || '正式发布' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **状态**: ${{ inputs.draft == 'true' && '草稿' || '已发布' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **链接**: [${{ inputs.tag_name }}](${{ steps.create_release.outputs.html_url }})" >> $GITHUB_STEP_SUMMARY